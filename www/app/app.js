// Generated by CoffeeScript 1.10.0
(function() {
  angular.module("hcMobile", ["ionic", 'ngResource', 'shared', "hcMobile.controllers", "hcMobile.services", 'highcharts-ng']).config([
    '$stateProvider', '$urlRouterProvider', 'BASE_URL', '$httpProvider', function($stateProvider, $urlRouterProvider, BASE_URL, $httpProvider) {
      $httpProvider.interceptors.push('AuthInterceptor');
      $stateProvider.state('app', {
        cache: false,
        resolve: {
          currentUser: function(SessionFactory) {
            return SessionFactory.getSession();
          }
        },
        controller: function($scope, currentUser) {
          return $scope.currentUser = currentUser;
        },
        url: '/app',
        templateUrl: 'app/layout/menu-layout.html',
        abstract: true
      }).state('app.dash', {
        url: '/dash',
        templateUrl: 'templates/dashboard.html',
        controller: 'DashCtrl'
      }).state('app.sensorSetup', {
        url: '/sensor-setup',
        templateUrl: 'templates/sensor-setup.html',
        controller: 'SensorSetupCtrl'
      }).state('app.reports', {
        url: '/reports',
        templateUrl: 'templates/reports.html',
        controller: 'ReportsCtrl'
      }).state('login', {
        url: '/login',
        templateUrl: 'templates/login.html',
        controller: 'SignInCtrl'
      });
      return $urlRouterProvider.otherwise(function() {
        if (window.localStorage.getItem('auth-token')) {
          return '/app/dash';
        } else {
          return '/login';
        }
      });
    }
  ]).run(function($ionicPlatform, $rootScope, $ionicLoading, $timeout, $state, SessionFactory, AuthTokenFactory) {
    $ionicPlatform.ready(function() {
      var pushNotification, token;
      if (window.cordova) {
        pushNotification = window.plugins.pushNotification;
        if (ionic.Platform.isAndroid()) {
          token = localStorage.getItem('Android_token');
          if (!token) {
            pushNotification.register(pushCallbacks.GCM.successfulRegistration, pushCallbacks.errorHandler, {
              senderID: '125902103424',
              ecb: 'pushCallbacks.GCM.onNotification'
            });
          }
        }
        if (ionic.Platform.isIOS()) {
          token = localStorage.getItem('iPhone_token');
          if (!token) {
            pushNotification.register(pushCallbacks.APN.successfulRegistration, pushCallbacks.errorHandler, {
              badge: 'true',
              sound: 'true',
              alert: 'true',
              ecb: 'pushCallbacks.APN.onNotification'
            });
          }
        }
      }
      if (window.StatusBar) {
        return StatusBar.styleDefault();
      }
    });
    $rootScope.showLoading = function(msg) {
      return $ionicLoading.show({
        template: msg || "Loading",
        animation: "fade-in",
        showBackdrop: true,
        maxWidth: 200,
        showDelay: 0
      });
    };
    $rootScope.hideLoading = function() {
      return $ionicLoading.hide();
    };
    $rootScope.toast = function(msg) {
      $rootScope.showLoading(msg);
      return $timeout((function() {
        return $rootScope.hideLoading();
      }), 2999);
    };
    return $rootScope.logout = function() {
      SessionFactory.deleteSession();
      AuthTokenFactory.setToken(null);
      return $state.go('login');
    };
  }).filter('capitalize', function() {
    return function(input) {
      if (input !== null) {
        return input.substring(0, 1).toUpperCase() + input.substring(1);
      }
    };
  });

}).call(this);
