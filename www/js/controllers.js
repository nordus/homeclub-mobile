// Generated by CoffeeScript 1.10.0
(function() {
  var app,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  app = angular.module("hcMobile.controllers", ['ngSanitize', 'ngCordova', 'firebase']);

  app.controller('ReportsCtrl', function($scope, fieldhistogram) {
    $scope.searchParams = {
      interval: 'hour',
      start: '1 day ago'
    };
    return fieldhistogram.get($scope.searchParams, function(data) {
      return $scope.chartData = data;
    });
  });

  app.controller('DashCtrl', function($scope, alert, alerttext, latest, currentUser, $firebaseObject) {
    var ref;
    ga('send', 'screenview', {
      screenName: '/dashboard'
    });
    $scope.alerttext = alerttext;
    ref = new Firebase('https://homeclub-q.firebaseio.com/' + currentUser.gateways[0]._id);
    $scope.sensorHubRealtime = $firebaseObject(ref.child('sensorHubs'));
    $scope.latestNetworkHubPowerSource = $firebaseObject(ref.child('latestPowerStatus'));
    $scope.latestNetworkHubRssi = $firebaseObject(ref.child('latestRssi'));
    $scope.cssClassByRssiThreshold = function(rssi) {
      var rssiNum;
      if (rssi === void 0) {
        return 'light';
      }
      rssiNum = Number(rssi);
      switch (false) {
        case !(rssiNum < -95):
          return 'assertive';
        case !(rssiNum < -80):
          return 'energized';
        default:
          return 'balanced';
      }
    };
    $scope.hasAlert = function(sensorHubMacAddress) {
      var ref1;
      return ((ref1 = $scope.sensorHubRealtime[sensorHubMacAddress]) != null ? ref1.latestAlert : void 0) !== void 0;
    };
    $scope.noAlert = function(sensorHubMacAddress) {
      var ref1;
      return ((ref1 = $scope.sensorHubRealtime[sensorHubMacAddress]) != null ? ref1.latestAlert : void 0) === void 0;
    };
    $scope.alerts = {};
    $scope.toggleAlerts = function(sensorHubMacAddress) {
      if ($scope.alerts[sensorHubMacAddress]) {
        return $scope.alerts[sensorHubMacAddress] = void 0;
      } else {
        return alert.query({
          sensorHubMacAddress: sensorHubMacAddress
        }, function(alerts) {
          return $scope.alerts[sensorHubMacAddress] = alerts;
        });
      }
    };
    return $scope.showOkIfNoAlerts = function(roomName) {
      return roomName === 'Water Detect' || roomName === 'Human Motion' || roomName === 'Item Movement';
    };
  });

  app.controller('SensorSetupCtrl', function($scope, meta, sensorhub, SessionFactory, $rootScope, currentUser) {
    var sensorTypesBySensorHubTypeId;
    ga('send', 'screenview', {
      screenName: '/sensors'
    });
    $scope.meta = meta;
    sensorhub.query({
      sensorHubMacAddresses: currentUser.gateways[0].sensorHubs
    }, function(sensorHubs) {
      return $scope.sensorHubs = sensorHubs;
    });
    $scope.sensorTypes = ['humidity', 'light', 'motion', 'movement', 'temperature', 'water'];
    sensorTypesBySensorHubTypeId = {
      '1': ['temperature'],
      '2': ['humidity', 'light', 'temperature'],
      '3': ['movement'],
      '4': ['motion']
    };
    $scope.sensorTypesOfCurrentSensorHub = function(sensorHub) {
      return sensorTypesBySensorHubTypeId[sensorHub.sensorHubType] || [];
    };
    $scope.toggleSubscription = function(sensorHub, deliveryMethod, sensorType) {
      var subscriptions;
      subscriptions = sensorHub[deliveryMethod + "Subscriptions"];
      if (indexOf.call(subscriptions, sensorType) >= 0) {
        return subscriptions.splice(subscriptions.indexOf(sensorType), 1);
      } else {
        return subscriptions.push(sensorType);
      }
    };
    $scope.isChecked = function(sensorHub, value, deliveryMethod) {
      var checkedNotifications, indexOfValue, notificationName;
      notificationName = deliveryMethod + "Subscriptions";
      checkedNotifications = sensorHub[notificationName];
      indexOfValue = checkedNotifications.indexOf(value);
      return indexOfValue !== -1;
    };
    return $scope.save = function() {
      $scope.sensorHubs.forEach(function(sensorHub) {
        return sensorHub.$update();
      });
      SessionFactory.setRoomNames($scope.sensorHubs);
      return $rootScope.toast('Saved');
    };
  });

  app.controller('SignInCtrl', function($scope, $state, $http, $rootScope, AuthFactory, SessionFactory, sensorhub, meta, $cordovaAppVersion, $cordovaDevice, BASE_URL, AuthTokenFactory) {
    return $scope.login = function(user) {
      $rootScope.showLoading("Authenticating..");
      return AuthFactory.login(user).success(function(data) {
        return $http.get(BASE_URL + '/me/customer-account').success(function(resp) {
          return ionic.Platform.ready(function() {
            var analyticsParams, currentUser, setAnalytics;
            currentUser = resp.account;
            currentUser.uuid = window.cordova ? $cordovaDevice.getUUID() : currentUser._id;
            ga('create', 'UA-50394594-4', {
              storage: 'none',
              clientId: currentUser.uuid,
              userId: currentUser._id
            });
            analyticsParams = {
              appName: 'HomeClub Mobile',
              checkProtocolTask: null,
              checkStorageTask: null,
              dimension1: currentUser._id,
              dimension2: currentUser.carrier
            };
            setAnalytics = function() {
              return ga('set', analyticsParams);
            };
            if (window.cordova) {
              $cordovaAppVersion.getAppVersion().then(function(version) {
                analyticsParams.appVersion = version;
                return setAnalytics();
              });
            } else {
              setAnalytics();
            }
            SessionFactory.createSession(currentUser);
            AuthTokenFactory.setToken(resp.token);
            return sensorhub.query({
              sensorHubMacAddresses: currentUser.gateways[0].sensorHubs
            }, function(sensorHubs) {
              SessionFactory.setRoomNames(sensorHubs);
              $state.go('app.dash');
              return $rootScope.hideLoading();
            });
          });
        });
      }).error(function(data) {
        $rootScope.hideLoading();
        return $rootScope.toast('Invalid Credentials');
      });
    };
  });

}).call(this);
